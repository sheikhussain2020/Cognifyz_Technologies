# -*- coding: utf-8 -*-
"""INSIGHTS FROM RAILWAY SCHEDULE DATA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10J_FgbYDRjuHf_Q6VK6Wi1ZxNQuoUzDc
"""

#Level 1: Data Exploration and Basic Operations
#Importing essential libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

#Task 1.1: Load and Inspect Data
#Load the Dataset
data = pd.read_csv(r'/content/Railway_info.csv')

#Display the first 10 rows
print('First 10 Rows :', data.head(10))

#Display the structure of the Dataset
print('\nStructure of the Dataset:')
data.info()

# Check for missing values
print("\nMissing Values:")
print(data.isnull().sum())

#Task 1.2: Basic Statistics
# Calculate the total number of trains
total_trains = data['Train_No'].nunique()
print(f"Total number of trains: {total_trains}")

# Calculate the number of unique source stations
unique_source_stations = data['Source_Station_Name'].nunique()
print(f"Number of unique source stations: {unique_source_stations}")

# Calculate the number of unique destination stations
unique_destination_stations = data['Destination_Station_Name'].nunique()
print(f"Number of unique destination stations: {unique_destination_stations}")

# Find the most common source station
most_common_source = data['Source_Station_Name'].value_counts().idxmax()
most_common_source_count = data['Source_Station_Name'].value_counts().max()
print(f"Most common source station: {most_common_source} (count: {most_common_source_count})")

# Find the most common destination station
most_common_destination = data['Destination_Station_Name'].value_counts().idxmax()
most_common_destination_count = data['Destination_Station_Name'].value_counts().max()
print(f"Most common destination station: {most_common_destination} (count: {most_common_destination_count})")

#Task 1.3: Data Cleaning
# Identify missing values
print("Missing values before cleaning:")
print(data.isnull().sum())

# Handle missing values
# Assuming we drop rows with missing values for simplicity
data_cleaned = data.dropna()

# Verify no missing values remain
print("\nMissing values after cleaning:")
print(data_cleaned.isnull().sum())

# Standardize the format of station names (convert to uppercase)
data_cleaned['Source_Station_Name'] = data_cleaned['Source_Station_Name'].str.upper()
data_cleaned['Destination_Station_Name'] = data_cleaned['Destination_Station_Name'].str.upper()

# Display sample data after cleaning
print("\nSample data after cleaning and standardization:")
print(data_cleaned.head(10))

#Level 2: Data Transformation and Aggregation
# Filter the data for trains that operate on Monday
saturday_trains = data_cleaned[data_cleaned['days'].str.contains('Monday', case=False)]
print("Trains operating on Monday:")
print(saturday_trains.head(10))

# Extract trains that start from a specific station
specific_station = "DELHI-SAFDAR JANG"
trains_from_station = data_cleaned[data_cleaned['Source_Station_Name'] == specific_station.upper()]
print(f"\nTrains starting from {specific_station}:")
print(trains_from_station.head(10))

#Task 2.2: Grouping and Aggregation
# Group by source station and count the number of trains originating from each station
trains_per_station = data_cleaned.groupby('Source_Station_Name')['Train_No'].count()
print("Number of trains originating from each source station:")
print(trains_per_station)

# Calculate the average number of trains per day for each source station
# Assuming 'days' column represents operating days in a week
# Convert 'days' to the number of operating days
def count_operating_days(days):
    return len(days.split(','))

data_cleaned['Operating_Days_Count'] = data_cleaned['days'].apply(count_operating_days)
avg_trains_per_day = (
    data_cleaned.groupby('Source_Station_Name')['Operating_Days_Count']
    .mean()
    .round(2)
)
print("\nAverage number of trains per day for each source station:")
print(avg_trains_per_day)

#Task 2.3: Data Enrichment
# Define a function to categorize trains based on operating days
def categorize_operating_days(days):
    days_lower = days.lower()
    if 'saturday' in days_lower or 'sunday' in days_lower:
        return 'Weekend'
    else:
        return 'Weekday'

# Apply the function to create a new column
data_cleaned['Day_Category'] = data_cleaned['days'].apply(categorize_operating_days)

# Display sample data with the new column
print("Data with 'Day_Category' column:")
print(data_cleaned[['Train_No', 'Train_Name', 'days', 'Day_Category']].head(10))

#Level 3: Advanced Data Analysis
# Set the style for the plots
sns.set(style="whitegrid")

# Plot the distribution of train journeys throughout the week
plt.figure(figsize=(10, 10))
train_day_counts = data_cleaned['days'].value_counts()
sns.barplot(x=train_day_counts.index, y=train_day_counts.values, palette="Blues_d")
plt.title("Distribution of Train Journeys Throughout the Week")
plt.xlabel("Day of the Week")
plt.ylabel("Number of Trains")
plt.xticks(rotation=45)
plt.show()

# Identify patterns in train operations based on source and destination stations
# Group by source and destination to identify the most frequent routes
route_counts = data_cleaned.groupby(['Source_Station_Name', 'Destination_Station_Name']).size().reset_index(name='Train_Count')
top_routes = route_counts.sort_values(by='Train_Count', ascending=False).head(10)

# Plot the top 10 most frequent routes
plt.figure(figsize=(12, 8))
sns.barplot(x='Train_Count', y='Source_Station_Name', hue='Destination_Station_Name', data=top_routes, palette="Set2")
plt.title("Top 10 Most Frequent Train Routes (Source to Destination)")
plt.xlabel("Number of Trains")
plt.ylabel("Source Station")
plt.show()

#Task 3.2: Correlation and Insights
# First, create a new DataFrame to calculate the number of trains per day of the week
train_day_counts = data_cleaned.groupby('days').size().reset_index(name='Train_Count')

# Plot the correlation between the number of trains and days of the week using a bar plot
plt.figure(figsize=(10, 6))
sns.barplot(x='days', y='Train_Count', data=train_day_counts, palette="viridis")
plt.title("Correlation between Number of Trains and Days of the Week")
plt.xlabel("Day of the Week")
plt.ylabel("Number of Trains")
plt.xticks(rotation=45)
plt.show()

# Provide insights and recommendations based on the analysis
# Displaying the correlation and insights
train_day_counts_sorted = train_day_counts.sort_values(by='Train_Count', ascending=False)
print("\nCorrelation between the number of trains and specific days of the week:")
print(train_day_counts_sorted)

# Insights based on the correlation:
# - We may notice trends where weekends have more or fewer trains based on the train service's nature.
# - Certain weekdays may have higher or lower frequencies.
# - Specific stations could show higher train frequency on weekends versus weekdays.

# Insights based on analysis:
if 'Saturday' in train_day_counts_sorted['days'].values:
    weekend_trains = train_day_counts_sorted[train_day_counts_sorted['days'].isin(['Saturday', 'Sunday'])]
    weekday_trains = train_day_counts_sorted[~train_day_counts_sorted['days'].isin(['Saturday', 'Sunday'])]
    print("\nWeekend train operations are as follows:")
    print(weekend_trains)
    print("\nWeekday train operations are as follows:")
    print(weekday_trains)

#Level 4: Data Visualization and Reporting
#Task 4.1: Visualization
# Set the style for seaborn plots
sns.set(style="whitegrid")

# 1. Bar chart: Number of trains per source station
plt.figure(figsize=(12, 6))
station_counts = data_cleaned['Source_Station_Name'].value_counts().head(10)
sns.barplot(x=station_counts.index, y=station_counts.values, palette="viridis")
plt.title("Top 10 Stations with the Most Number of Trains")
plt.xlabel("Source Station")
plt.ylabel("Number of Trains")
plt.xticks(rotation=45)
plt.show()

# 2. Line chart: Day-wise distribution of trains
train_day_counts = data_cleaned['days'].value_counts().sort_index()
plt.figure(figsize=(10, 6))
sns.lineplot(x=train_day_counts.index, y=train_day_counts.values, marker="o", color='blue')
plt.title("Day-wise Distribution of Trains")
plt.xlabel("Day of the Week")
plt.ylabel("Number of Trains")
plt.xticks(rotation=45)
plt.show()

# 3. Heatmap: Distribution of train counts by source and destination station
# Create a pivot table for the heatmap (count of trains by source and destination)
pivot_data = data_cleaned.groupby(['Source_Station_Name', 'Destination_Station_Name']).size().unstack(fill_value=0)

# Create and display the heatmap with the red color map
plt.figure(figsize=(12, 8))
sns.heatmap(pivot_data, cmap="Reds", annot=False, fmt="d", linewidths=0.5)
plt.title("Heatmap of Train Distribution by Source and Destination Stations")
plt.xlabel("Destination Station")
plt.ylabel("Source Station")
plt.show()

# 4. Plotly: Interactive Bar Chart for Number of Trains per Source Station (Top 10)
fig = px.bar(station_counts,
             x=station_counts.index,
             y=station_counts.values,
             title="Top 10 Stations with the Most Number of Trains",
             labels={'x': 'Source Station', 'y': 'Number of Trains'},
             color=station_counts.values,
             color_continuous_scale="Viridis")
fig.update_xaxes(tickangle=45)
fig.show()